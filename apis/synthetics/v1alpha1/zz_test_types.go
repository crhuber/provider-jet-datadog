/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type APIStepInitParameters struct {

	// Determines whether or not to continue with test if this step fails.
	AllowFailure *bool `json:"allowFailure,omitempty" tf:"allow_failure,omitempty"`

	// Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
	Assertion []AssertionInitParameters `json:"assertion,omitempty" tf:"assertion,omitempty"`

	// Values to parse and save as variables from the response.
	ExtractedValue []ExtractedValueInitParameters `json:"extractedValue,omitempty" tf:"extracted_value,omitempty"`

	// Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.
	IsCritical *bool `json:"isCritical,omitempty" tf:"is_critical,omitempty"`

	// The name of the step.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
	RequestBasicauth []RequestBasicauthInitParameters `json:"requestBasicauth,omitempty" tf:"request_basicauth,omitempty"`

	// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
	RequestClientCertificate []RequestClientCertificateInitParameters `json:"requestClientCertificate,omitempty" tf:"request_client_certificate,omitempty"`

	// The request for the api step.
	RequestDefinition []RequestDefinitionInitParameters `json:"requestDefinition,omitempty" tf:"request_definition,omitempty"`

	// Header name and value map.
	RequestHeaders map[string]*string `json:"requestHeaders,omitempty" tf:"request_headers,omitempty"`

	// The proxy to perform the test.
	RequestProxy []RequestProxyInitParameters `json:"requestProxy,omitempty" tf:"request_proxy,omitempty"`

	// Query arguments name and value map.
	RequestQuery map[string]*string `json:"requestQuery,omitempty" tf:"request_query,omitempty"`

	Retry []RetryInitParameters `json:"retry,omitempty" tf:"retry,omitempty"`

	// The subtype of the Synthetic multistep API test step. Valid values are `http`.
	Subtype *string `json:"subtype,omitempty" tf:"subtype,omitempty"`
}

type APIStepObservation struct {

	// Determines whether or not to continue with test if this step fails.
	AllowFailure *bool `json:"allowFailure,omitempty" tf:"allow_failure,omitempty"`

	// Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
	Assertion []AssertionObservation `json:"assertion,omitempty" tf:"assertion,omitempty"`

	// Values to parse and save as variables from the response.
	ExtractedValue []ExtractedValueObservation `json:"extractedValue,omitempty" tf:"extracted_value,omitempty"`

	// Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.
	IsCritical *bool `json:"isCritical,omitempty" tf:"is_critical,omitempty"`

	// The name of the step.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
	RequestBasicauth []RequestBasicauthObservation `json:"requestBasicauth,omitempty" tf:"request_basicauth,omitempty"`

	// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
	RequestClientCertificate []RequestClientCertificateObservation `json:"requestClientCertificate,omitempty" tf:"request_client_certificate,omitempty"`

	// The request for the api step.
	RequestDefinition []RequestDefinitionObservation `json:"requestDefinition,omitempty" tf:"request_definition,omitempty"`

	// Header name and value map.
	RequestHeaders map[string]*string `json:"requestHeaders,omitempty" tf:"request_headers,omitempty"`

	// The proxy to perform the test.
	RequestProxy []RequestProxyObservation `json:"requestProxy,omitempty" tf:"request_proxy,omitempty"`

	// Query arguments name and value map.
	RequestQuery map[string]*string `json:"requestQuery,omitempty" tf:"request_query,omitempty"`

	Retry []RetryObservation `json:"retry,omitempty" tf:"retry,omitempty"`

	// The subtype of the Synthetic multistep API test step. Valid values are `http`.
	Subtype *string `json:"subtype,omitempty" tf:"subtype,omitempty"`
}

type APIStepParameters struct {

	// Determines whether or not to continue with test if this step fails.
	// +kubebuilder:validation:Optional
	AllowFailure *bool `json:"allowFailure,omitempty" tf:"allow_failure,omitempty"`

	// Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
	// +kubebuilder:validation:Optional
	Assertion []AssertionParameters `json:"assertion,omitempty" tf:"assertion,omitempty"`

	// Values to parse and save as variables from the response.
	// +kubebuilder:validation:Optional
	ExtractedValue []ExtractedValueParameters `json:"extractedValue,omitempty" tf:"extracted_value,omitempty"`

	// Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.
	// +kubebuilder:validation:Optional
	IsCritical *bool `json:"isCritical,omitempty" tf:"is_critical,omitempty"`

	// The name of the step.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
	// +kubebuilder:validation:Optional
	RequestBasicauth []RequestBasicauthParameters `json:"requestBasicauth,omitempty" tf:"request_basicauth,omitempty"`

	// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
	// +kubebuilder:validation:Optional
	RequestClientCertificate []RequestClientCertificateParameters `json:"requestClientCertificate,omitempty" tf:"request_client_certificate,omitempty"`

	// The request for the api step.
	// +kubebuilder:validation:Optional
	RequestDefinition []RequestDefinitionParameters `json:"requestDefinition,omitempty" tf:"request_definition,omitempty"`

	// Header name and value map.
	// +kubebuilder:validation:Optional
	RequestHeaders map[string]*string `json:"requestHeaders,omitempty" tf:"request_headers,omitempty"`

	// The proxy to perform the test.
	// +kubebuilder:validation:Optional
	RequestProxy []RequestProxyParameters `json:"requestProxy,omitempty" tf:"request_proxy,omitempty"`

	// Query arguments name and value map.
	// +kubebuilder:validation:Optional
	RequestQuery map[string]*string `json:"requestQuery,omitempty" tf:"request_query,omitempty"`

	// +kubebuilder:validation:Optional
	Retry []RetryParameters `json:"retry,omitempty" tf:"retry,omitempty"`

	// The subtype of the Synthetic multistep API test step. Valid values are `http`.
	// +kubebuilder:validation:Optional
	Subtype *string `json:"subtype,omitempty" tf:"subtype,omitempty"`
}

type AssertionInitParameters struct {

	// Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// If assertion type is `header`, this is the header name.
	Property *string `json:"property,omitempty" tf:"property,omitempty"`

	// Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.
	Targetjsonpath []TargetjsonpathInitParameters `json:"targetjsonpath,omitempty" tf:"targetjsonpath,omitempty"`

	// Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AssertionObservation struct {

	// Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// If assertion type is `header`, this is the header name.
	Property *string `json:"property,omitempty" tf:"property,omitempty"`

	// Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.
	Targetjsonpath []TargetjsonpathObservation `json:"targetjsonpath,omitempty" tf:"targetjsonpath,omitempty"`

	// Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AssertionParameters struct {

	// Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// If assertion type is `header`, this is the header name.
	// +kubebuilder:validation:Optional
	Property *string `json:"property,omitempty" tf:"property,omitempty"`

	// Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.
	// +kubebuilder:validation:Optional
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.
	// +kubebuilder:validation:Optional
	Targetjsonpath []TargetjsonpathParameters `json:"targetjsonpath,omitempty" tf:"targetjsonpath,omitempty"`

	// Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AssertionTargetjsonpathInitParameters struct {

	// The JSON path to assert.
	Jsonpath *string `json:"jsonpath,omitempty" tf:"jsonpath,omitempty"`

	// The specific operator to use on the path.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Expected matching value.
	Targetvalue *string `json:"targetvalue,omitempty" tf:"targetvalue,omitempty"`
}

type AssertionTargetjsonpathObservation struct {

	// The JSON path to assert.
	Jsonpath *string `json:"jsonpath,omitempty" tf:"jsonpath,omitempty"`

	// The specific operator to use on the path.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Expected matching value.
	Targetvalue *string `json:"targetvalue,omitempty" tf:"targetvalue,omitempty"`
}

type AssertionTargetjsonpathParameters struct {

	// The JSON path to assert.
	// +kubebuilder:validation:Optional
	Jsonpath *string `json:"jsonpath,omitempty" tf:"jsonpath,omitempty"`

	// The specific operator to use on the path.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Expected matching value.
	// +kubebuilder:validation:Optional
	Targetvalue *string `json:"targetvalue,omitempty" tf:"targetvalue,omitempty"`
}

type BrowserStepInitParameters struct {

	// Determines if the step should be allowed to fail.
	AllowFailure *bool `json:"allowFailure,omitempty" tf:"allow_failure,omitempty"`

	// Force update of the "element" parameter for the step
	ForceElementUpdate *bool `json:"forceElementUpdate,omitempty" tf:"force_element_update,omitempty"`

	// Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.
	IsCritical *bool `json:"isCritical,omitempty" tf:"is_critical,omitempty"`

	// Name of the step.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Parameters for the step.
	Params []ParamsInitParameters `json:"params,omitempty" tf:"params,omitempty"`

	// Used to override the default timeout of a step.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Type of the step. Valid values are `assertCurrentUrl`, `assertElementAttribute`, `assertElementContent`, `assertElementPresent`, `assertEmail`, `assertFileDownload`, `assertFromJavascript`, `assertPageContains`, `assertPageLacks`, `click`, `extractFromJavascript`, `extractVariable`, `goToEmailLink`, `goToUrl`, `goToUrlAndMeasureTti`, `hover`, `playSubTest`, `pressKey`, `refresh`, `runApiTest`, `scroll`, `selectOption`, `typeText`, `uploadFiles`, `wait`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type BrowserStepObservation struct {

	// Determines if the step should be allowed to fail.
	AllowFailure *bool `json:"allowFailure,omitempty" tf:"allow_failure,omitempty"`

	// Force update of the "element" parameter for the step
	ForceElementUpdate *bool `json:"forceElementUpdate,omitempty" tf:"force_element_update,omitempty"`

	// Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.
	IsCritical *bool `json:"isCritical,omitempty" tf:"is_critical,omitempty"`

	// Name of the step.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Parameters for the step.
	Params []ParamsObservation `json:"params,omitempty" tf:"params,omitempty"`

	// Used to override the default timeout of a step.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Type of the step. Valid values are `assertCurrentUrl`, `assertElementAttribute`, `assertElementContent`, `assertElementPresent`, `assertEmail`, `assertFileDownload`, `assertFromJavascript`, `assertPageContains`, `assertPageLacks`, `click`, `extractFromJavascript`, `extractVariable`, `goToEmailLink`, `goToUrl`, `goToUrlAndMeasureTti`, `hover`, `playSubTest`, `pressKey`, `refresh`, `runApiTest`, `scroll`, `selectOption`, `typeText`, `uploadFiles`, `wait`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type BrowserStepParameters struct {

	// Determines if the step should be allowed to fail.
	// +kubebuilder:validation:Optional
	AllowFailure *bool `json:"allowFailure,omitempty" tf:"allow_failure,omitempty"`

	// Force update of the "element" parameter for the step
	// +kubebuilder:validation:Optional
	ForceElementUpdate *bool `json:"forceElementUpdate,omitempty" tf:"force_element_update,omitempty"`

	// Determines whether or not to consider the entire test as failed if this step fails. Can be used only if `allow_failure` is `true`.
	// +kubebuilder:validation:Optional
	IsCritical *bool `json:"isCritical,omitempty" tf:"is_critical,omitempty"`

	// Name of the step.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Parameters for the step.
	// +kubebuilder:validation:Optional
	Params []ParamsParameters `json:"params,omitempty" tf:"params,omitempty"`

	// Used to override the default timeout of a step.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// Type of the step. Valid values are `assertCurrentUrl`, `assertElementAttribute`, `assertElementContent`, `assertElementPresent`, `assertEmail`, `assertFileDownload`, `assertFromJavascript`, `assertPageContains`, `assertPageLacks`, `click`, `extractFromJavascript`, `extractVariable`, `goToEmailLink`, `goToUrl`, `goToUrlAndMeasureTti`, `hover`, `playSubTest`, `pressKey`, `refresh`, `runApiTest`, `scroll`, `selectOption`, `typeText`, `uploadFiles`, `wait`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type BrowserVariableInitParameters struct {

	// Example for the variable.
	Example *string `json:"example,omitempty" tf:"example,omitempty"`

	// ID of the global variable to use. This is actually only used (and required) in the case of using a variable of type `global`.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of the variable.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Pattern of the variable.
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// Type of browser test variable. Valid values are `element`, `email`, `global`, `javascript`, `text`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type BrowserVariableObservation struct {

	// Example for the variable.
	Example *string `json:"example,omitempty" tf:"example,omitempty"`

	// ID of the global variable to use. This is actually only used (and required) in the case of using a variable of type `global`.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of the variable.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Pattern of the variable.
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// Type of browser test variable. Valid values are `element`, `email`, `global`, `javascript`, `text`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type BrowserVariableParameters struct {

	// Example for the variable.
	// +kubebuilder:validation:Optional
	Example *string `json:"example,omitempty" tf:"example,omitempty"`

	// ID of the global variable to use. This is actually only used (and required) in the case of using a variable of type `global`.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of the variable.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Pattern of the variable.
	// +kubebuilder:validation:Optional
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// Type of browser test variable. Valid values are `element`, `email`, `global`, `javascript`, `text`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type CertInitParameters struct {

	// File name for the certificate.
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`
}

type CertObservation struct {

	// File name for the certificate.
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`
}

type CertParameters struct {

	// Content of the certificate.
	// +kubebuilder:validation:Required
	ContentSecretRef v1.SecretKeySelector `json:"contentSecretRef" tf:"-"`

	// File name for the certificate.
	// +kubebuilder:validation:Optional
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`
}

type ConfigVariableInitParameters struct {

	// Example for the variable.
	Example *string `json:"example,omitempty" tf:"example,omitempty"`

	// When type = `global`, ID of the global variable to use.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of the variable.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Pattern of the variable.
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// Type of test configuration variable. Valid values are `global`, `text`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ConfigVariableObservation struct {

	// Example for the variable.
	Example *string `json:"example,omitempty" tf:"example,omitempty"`

	// When type = `global`, ID of the global variable to use.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of the variable.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Pattern of the variable.
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// Type of test configuration variable. Valid values are `global`, `text`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ConfigVariableParameters struct {

	// Example for the variable.
	// +kubebuilder:validation:Optional
	Example *string `json:"example,omitempty" tf:"example,omitempty"`

	// When type = `global`, ID of the global variable to use.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Name of the variable.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Pattern of the variable.
	// +kubebuilder:validation:Optional
	Pattern *string `json:"pattern,omitempty" tf:"pattern,omitempty"`

	// Type of test configuration variable. Valid values are `global`, `text`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ElementUserLocatorInitParameters struct {
	FailTestOnCannotLocate *bool `json:"failTestOnCannotLocate,omitempty" tf:"fail_test_on_cannot_locate,omitempty"`

	Value []ValueInitParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type ElementUserLocatorObservation struct {
	FailTestOnCannotLocate *bool `json:"failTestOnCannotLocate,omitempty" tf:"fail_test_on_cannot_locate,omitempty"`

	Value []ValueObservation `json:"value,omitempty" tf:"value,omitempty"`
}

type ElementUserLocatorParameters struct {

	// +kubebuilder:validation:Optional
	FailTestOnCannotLocate *bool `json:"failTestOnCannotLocate,omitempty" tf:"fail_test_on_cannot_locate,omitempty"`

	// +kubebuilder:validation:Optional
	Value []ValueParameters `json:"value,omitempty" tf:"value,omitempty"`
}

type ExtractedValueInitParameters struct {

	// When type is `http_header`, name of the header to use to extract the value.
	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Parser []ParserInitParameters `json:"parser,omitempty" tf:"parser,omitempty"`

	// Property of the Synthetics Test Response to use for the variable. Valid values are `http_body`, `http_header`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ExtractedValueObservation struct {

	// When type is `http_header`, name of the header to use to extract the value.
	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Parser []ParserObservation `json:"parser,omitempty" tf:"parser,omitempty"`

	// Property of the Synthetics Test Response to use for the variable. Valid values are `http_body`, `http_header`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ExtractedValueParameters struct {

	// When type is `http_header`, name of the header to use to extract the value.
	// +kubebuilder:validation:Optional
	Field *string `json:"field,omitempty" tf:"field,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Parser []ParserParameters `json:"parser,omitempty" tf:"parser,omitempty"`

	// Property of the Synthetics Test Response to use for the variable. Valid values are `http_body`, `http_header`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type KeyInitParameters struct {

	// File name for the certificate.
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`
}

type KeyObservation struct {

	// File name for the certificate.
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`
}

type KeyParameters struct {

	// Content of the certificate.
	// +kubebuilder:validation:Required
	ContentSecretRef v1.SecretKeySelector `json:"contentSecretRef" tf:"-"`

	// File name for the certificate.
	// +kubebuilder:validation:Optional
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`
}

type MonitorOptionsInitParameters struct {

	// Specify a renotification frequency.
	RenotifyInterval *float64 `json:"renotifyInterval,omitempty" tf:"renotify_interval,omitempty"`
}

type MonitorOptionsObservation struct {

	// Specify a renotification frequency.
	RenotifyInterval *float64 `json:"renotifyInterval,omitempty" tf:"renotify_interval,omitempty"`
}

type MonitorOptionsParameters struct {

	// Specify a renotification frequency.
	// +kubebuilder:validation:Optional
	RenotifyInterval *float64 `json:"renotifyInterval,omitempty" tf:"renotify_interval,omitempty"`
}

type OptionsListInitParameters struct {

	// For SSL test, whether or not the test should allow self signed certificates.
	AcceptSelfSigned *bool `json:"acceptSelfSigned,omitempty" tf:"accept_self_signed,omitempty"`

	// Allows loading insecure content for an HTTP test.
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// For SSL test, whether or not the test should fail on revoked certificate in stapled OCSP.
	CheckCertificateRevocation *bool `json:"checkCertificateRevocation,omitempty" tf:"check_certificate_revocation,omitempty"`

	// Determines whether or not the API HTTP test should follow redirects.
	FollowRedirects *bool `json:"followRedirects,omitempty" tf:"follow_redirects,omitempty"`

	// Minimum amount of time in failure required to trigger an alert. Default is `0`.
	MinFailureDuration *float64 `json:"minFailureDuration,omitempty" tf:"min_failure_duration,omitempty"`

	// Minimum number of locations in failure required to trigger an alert. Default is `1`.
	MinLocationFailed *float64 `json:"minLocationFailed,omitempty" tf:"min_location_failed,omitempty"`

	// The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.
	MonitorName *string `json:"monitorName,omitempty" tf:"monitor_name,omitempty"`

	MonitorOptions []MonitorOptionsInitParameters `json:"monitorOptions,omitempty" tf:"monitor_options,omitempty"`

	MonitorPriority *float64 `json:"monitorPriority,omitempty" tf:"monitor_priority,omitempty"`

	// Prevents saving screenshots of the steps.
	NoScreenshot *bool `json:"noScreenshot,omitempty" tf:"no_screenshot,omitempty"`

	// A list of role identifiers pulled from the Roles API to restrict read and write access.
	RestrictedRoles []*string `json:"restrictedRoles,omitempty" tf:"restricted_roles,omitempty"`

	Retry []OptionsListRetryInitParameters `json:"retry,omitempty" tf:"retry,omitempty"`

	// How often the test should run (in seconds).
	TickEvery *float64 `json:"tickEvery,omitempty" tf:"tick_every,omitempty"`
}

type OptionsListObservation struct {

	// For SSL test, whether or not the test should allow self signed certificates.
	AcceptSelfSigned *bool `json:"acceptSelfSigned,omitempty" tf:"accept_self_signed,omitempty"`

	// Allows loading insecure content for an HTTP test.
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// For SSL test, whether or not the test should fail on revoked certificate in stapled OCSP.
	CheckCertificateRevocation *bool `json:"checkCertificateRevocation,omitempty" tf:"check_certificate_revocation,omitempty"`

	// Determines whether or not the API HTTP test should follow redirects.
	FollowRedirects *bool `json:"followRedirects,omitempty" tf:"follow_redirects,omitempty"`

	// Minimum amount of time in failure required to trigger an alert. Default is `0`.
	MinFailureDuration *float64 `json:"minFailureDuration,omitempty" tf:"min_failure_duration,omitempty"`

	// Minimum number of locations in failure required to trigger an alert. Default is `1`.
	MinLocationFailed *float64 `json:"minLocationFailed,omitempty" tf:"min_location_failed,omitempty"`

	// The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.
	MonitorName *string `json:"monitorName,omitempty" tf:"monitor_name,omitempty"`

	MonitorOptions []MonitorOptionsObservation `json:"monitorOptions,omitempty" tf:"monitor_options,omitempty"`

	MonitorPriority *float64 `json:"monitorPriority,omitempty" tf:"monitor_priority,omitempty"`

	// Prevents saving screenshots of the steps.
	NoScreenshot *bool `json:"noScreenshot,omitempty" tf:"no_screenshot,omitempty"`

	// A list of role identifiers pulled from the Roles API to restrict read and write access.
	RestrictedRoles []*string `json:"restrictedRoles,omitempty" tf:"restricted_roles,omitempty"`

	Retry []OptionsListRetryObservation `json:"retry,omitempty" tf:"retry,omitempty"`

	// How often the test should run (in seconds).
	TickEvery *float64 `json:"tickEvery,omitempty" tf:"tick_every,omitempty"`
}

type OptionsListParameters struct {

	// For SSL test, whether or not the test should allow self signed certificates.
	// +kubebuilder:validation:Optional
	AcceptSelfSigned *bool `json:"acceptSelfSigned,omitempty" tf:"accept_self_signed,omitempty"`

	// Allows loading insecure content for an HTTP test.
	// +kubebuilder:validation:Optional
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// For SSL test, whether or not the test should fail on revoked certificate in stapled OCSP.
	// +kubebuilder:validation:Optional
	CheckCertificateRevocation *bool `json:"checkCertificateRevocation,omitempty" tf:"check_certificate_revocation,omitempty"`

	// Determines whether or not the API HTTP test should follow redirects.
	// +kubebuilder:validation:Optional
	FollowRedirects *bool `json:"followRedirects,omitempty" tf:"follow_redirects,omitempty"`

	// Minimum amount of time in failure required to trigger an alert. Default is `0`.
	// +kubebuilder:validation:Optional
	MinFailureDuration *float64 `json:"minFailureDuration,omitempty" tf:"min_failure_duration,omitempty"`

	// Minimum number of locations in failure required to trigger an alert. Default is `1`.
	// +kubebuilder:validation:Optional
	MinLocationFailed *float64 `json:"minLocationFailed,omitempty" tf:"min_location_failed,omitempty"`

	// The monitor name is used for the alert title as well as for all monitor dashboard widgets and SLOs.
	// +kubebuilder:validation:Optional
	MonitorName *string `json:"monitorName,omitempty" tf:"monitor_name,omitempty"`

	// +kubebuilder:validation:Optional
	MonitorOptions []MonitorOptionsParameters `json:"monitorOptions,omitempty" tf:"monitor_options,omitempty"`

	// +kubebuilder:validation:Optional
	MonitorPriority *float64 `json:"monitorPriority,omitempty" tf:"monitor_priority,omitempty"`

	// Prevents saving screenshots of the steps.
	// +kubebuilder:validation:Optional
	NoScreenshot *bool `json:"noScreenshot,omitempty" tf:"no_screenshot,omitempty"`

	// A list of role identifiers pulled from the Roles API to restrict read and write access.
	// +kubebuilder:validation:Optional
	RestrictedRoles []*string `json:"restrictedRoles,omitempty" tf:"restricted_roles,omitempty"`

	// +kubebuilder:validation:Optional
	Retry []OptionsListRetryParameters `json:"retry,omitempty" tf:"retry,omitempty"`

	// How often the test should run (in seconds).
	// +kubebuilder:validation:Optional
	TickEvery *float64 `json:"tickEvery,omitempty" tf:"tick_every,omitempty"`
}

type OptionsListRetryInitParameters struct {

	// Number of retries needed to consider a location as failed before sending a notification alert.
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// Interval between a failed test and the next retry in milliseconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type OptionsListRetryObservation struct {

	// Number of retries needed to consider a location as failed before sending a notification alert.
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// Interval between a failed test and the next retry in milliseconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type OptionsListRetryParameters struct {

	// Number of retries needed to consider a location as failed before sending a notification alert.
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// Interval between a failed test and the next retry in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type ParamsInitParameters struct {

	// Name of the attribute to use for an "assert attribute" step.
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// Check type to use for an assertion step. Valid values are `equals`, `notEquals`, `contains`, `notContains`, `startsWith`, `notStartsWith`, `greater`, `lower`, `greaterEquals`, `lowerEquals`, `matchRegex`, `between`, `isEmpty`, `notIsEmpty`.
	Check *string `json:"check,omitempty" tf:"check,omitempty"`

	// Type of click to use for a "click" step.
	ClickType *string `json:"clickType,omitempty" tf:"click_type,omitempty"`

	// Javascript code to use for the step.
	Code *string `json:"code,omitempty" tf:"code,omitempty"`

	// Delay between each key stroke for a "type test" step.
	Delay *float64 `json:"delay,omitempty" tf:"delay,omitempty"`

	// Element to use for the step, json encoded string.
	Element *string `json:"element,omitempty" tf:"element,omitempty"`

	// Custom user selector to use for the step.
	ElementUserLocator []ElementUserLocatorInitParameters `json:"elementUserLocator,omitempty" tf:"element_user_locator,omitempty"`

	// Details of the email for an "assert email" step.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// For an "assert download" step.
	File *string `json:"file,omitempty" tf:"file,omitempty"`

	// Details of the files for an "upload files" step, json encoded string.
	Files *string `json:"files,omitempty" tf:"files,omitempty"`

	// Modifier to use for a "press key" step.
	Modifiers []*string `json:"modifiers,omitempty" tf:"modifiers,omitempty"`

	// ID of the tab to play the subtest.
	PlayingTabID *string `json:"playingTabId,omitempty" tf:"playing_tab_id,omitempty"`

	// Request for an API step.
	Request *string `json:"request,omitempty" tf:"request,omitempty"`

	// ID of the Synthetics test to use as subtest.
	SubtestPublicID *string `json:"subtestPublicId,omitempty" tf:"subtest_public_id,omitempty"`

	// Value of the step.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// Details of the variable to extract.
	Variable []VariableInitParameters `json:"variable,omitempty" tf:"variable,omitempty"`

	// For "file upload" steps.
	WithClick *bool `json:"withClick,omitempty" tf:"with_click,omitempty"`

	// X coordinates for a "scroll step".
	X *float64 `json:"x,omitempty" tf:"x,omitempty"`

	// Y coordinates for a "scroll step".
	Y *float64 `json:"y,omitempty" tf:"y,omitempty"`
}

type ParamsObservation struct {

	// Name of the attribute to use for an "assert attribute" step.
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// Check type to use for an assertion step. Valid values are `equals`, `notEquals`, `contains`, `notContains`, `startsWith`, `notStartsWith`, `greater`, `lower`, `greaterEquals`, `lowerEquals`, `matchRegex`, `between`, `isEmpty`, `notIsEmpty`.
	Check *string `json:"check,omitempty" tf:"check,omitempty"`

	// Type of click to use for a "click" step.
	ClickType *string `json:"clickType,omitempty" tf:"click_type,omitempty"`

	// Javascript code to use for the step.
	Code *string `json:"code,omitempty" tf:"code,omitempty"`

	// Delay between each key stroke for a "type test" step.
	Delay *float64 `json:"delay,omitempty" tf:"delay,omitempty"`

	// Element to use for the step, json encoded string.
	Element *string `json:"element,omitempty" tf:"element,omitempty"`

	// Custom user selector to use for the step.
	ElementUserLocator []ElementUserLocatorObservation `json:"elementUserLocator,omitempty" tf:"element_user_locator,omitempty"`

	// Details of the email for an "assert email" step.
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// For an "assert download" step.
	File *string `json:"file,omitempty" tf:"file,omitempty"`

	// Details of the files for an "upload files" step, json encoded string.
	Files *string `json:"files,omitempty" tf:"files,omitempty"`

	// Modifier to use for a "press key" step.
	Modifiers []*string `json:"modifiers,omitempty" tf:"modifiers,omitempty"`

	// ID of the tab to play the subtest.
	PlayingTabID *string `json:"playingTabId,omitempty" tf:"playing_tab_id,omitempty"`

	// Request for an API step.
	Request *string `json:"request,omitempty" tf:"request,omitempty"`

	// ID of the Synthetics test to use as subtest.
	SubtestPublicID *string `json:"subtestPublicId,omitempty" tf:"subtest_public_id,omitempty"`

	// Value of the step.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// Details of the variable to extract.
	Variable []VariableObservation `json:"variable,omitempty" tf:"variable,omitempty"`

	// For "file upload" steps.
	WithClick *bool `json:"withClick,omitempty" tf:"with_click,omitempty"`

	// X coordinates for a "scroll step".
	X *float64 `json:"x,omitempty" tf:"x,omitempty"`

	// Y coordinates for a "scroll step".
	Y *float64 `json:"y,omitempty" tf:"y,omitempty"`
}

type ParamsParameters struct {

	// Name of the attribute to use for an "assert attribute" step.
	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	// Check type to use for an assertion step. Valid values are `equals`, `notEquals`, `contains`, `notContains`, `startsWith`, `notStartsWith`, `greater`, `lower`, `greaterEquals`, `lowerEquals`, `matchRegex`, `between`, `isEmpty`, `notIsEmpty`.
	// +kubebuilder:validation:Optional
	Check *string `json:"check,omitempty" tf:"check,omitempty"`

	// Type of click to use for a "click" step.
	// +kubebuilder:validation:Optional
	ClickType *string `json:"clickType,omitempty" tf:"click_type,omitempty"`

	// Javascript code to use for the step.
	// +kubebuilder:validation:Optional
	Code *string `json:"code,omitempty" tf:"code,omitempty"`

	// Delay between each key stroke for a "type test" step.
	// +kubebuilder:validation:Optional
	Delay *float64 `json:"delay,omitempty" tf:"delay,omitempty"`

	// Element to use for the step, json encoded string.
	// +kubebuilder:validation:Optional
	Element *string `json:"element,omitempty" tf:"element,omitempty"`

	// Custom user selector to use for the step.
	// +kubebuilder:validation:Optional
	ElementUserLocator []ElementUserLocatorParameters `json:"elementUserLocator,omitempty" tf:"element_user_locator,omitempty"`

	// Details of the email for an "assert email" step.
	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// For an "assert download" step.
	// +kubebuilder:validation:Optional
	File *string `json:"file,omitempty" tf:"file,omitempty"`

	// Details of the files for an "upload files" step, json encoded string.
	// +kubebuilder:validation:Optional
	Files *string `json:"files,omitempty" tf:"files,omitempty"`

	// Modifier to use for a "press key" step.
	// +kubebuilder:validation:Optional
	Modifiers []*string `json:"modifiers,omitempty" tf:"modifiers,omitempty"`

	// ID of the tab to play the subtest.
	// +kubebuilder:validation:Optional
	PlayingTabID *string `json:"playingTabId,omitempty" tf:"playing_tab_id,omitempty"`

	// Request for an API step.
	// +kubebuilder:validation:Optional
	Request *string `json:"request,omitempty" tf:"request,omitempty"`

	// ID of the Synthetics test to use as subtest.
	// +kubebuilder:validation:Optional
	SubtestPublicID *string `json:"subtestPublicId,omitempty" tf:"subtest_public_id,omitempty"`

	// Value of the step.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`

	// Details of the variable to extract.
	// +kubebuilder:validation:Optional
	Variable []VariableParameters `json:"variable,omitempty" tf:"variable,omitempty"`

	// For "file upload" steps.
	// +kubebuilder:validation:Optional
	WithClick *bool `json:"withClick,omitempty" tf:"with_click,omitempty"`

	// X coordinates for a "scroll step".
	// +kubebuilder:validation:Optional
	X *float64 `json:"x,omitempty" tf:"x,omitempty"`

	// Y coordinates for a "scroll step".
	// +kubebuilder:validation:Optional
	Y *float64 `json:"y,omitempty" tf:"y,omitempty"`
}

type ParserInitParameters struct {

	// Type of parser for a Synthetics global variable from a synthetics test. Valid values are `raw`, `json_path`, `regex`, `x_path`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Regex or JSON path used for the parser. Not used with type `raw`.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ParserObservation struct {

	// Type of parser for a Synthetics global variable from a synthetics test. Valid values are `raw`, `json_path`, `regex`, `x_path`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Regex or JSON path used for the parser. Not used with type `raw`.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ParserParameters struct {

	// Type of parser for a Synthetics global variable from a synthetics test. Valid values are `raw`, `json_path`, `regex`, `x_path`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Regex or JSON path used for the parser. Not used with type `raw`.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type RequestBasicauthInitParameters struct {

	// Domain for `ntlm` authentication.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Region for `SIGV4` authentication.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Service name for `SIGV4` authentication.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Session token for `SIGV4` authentication.
	SessionToken *string `json:"sessionToken,omitempty" tf:"session_token,omitempty"`

	// Type of basic authentication to use when performing the test.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Username for authentication.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Workstation for `ntlm` authentication.
	Workstation *string `json:"workstation,omitempty" tf:"workstation,omitempty"`
}

type RequestBasicauthObservation struct {

	// Domain for `ntlm` authentication.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Region for `SIGV4` authentication.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Service name for `SIGV4` authentication.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Session token for `SIGV4` authentication.
	SessionToken *string `json:"sessionToken,omitempty" tf:"session_token,omitempty"`

	// Type of basic authentication to use when performing the test.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Username for authentication.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Workstation for `ntlm` authentication.
	Workstation *string `json:"workstation,omitempty" tf:"workstation,omitempty"`
}

type RequestBasicauthParameters struct {

	// Access key for `SIGV4` authentication.
	// +kubebuilder:validation:Optional
	AccessKeySecretRef *v1.SecretKeySelector `json:"accessKeySecretRef,omitempty" tf:"-"`

	// Domain for `ntlm` authentication.
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Password for authentication.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Region for `SIGV4` authentication.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Secret key for `SIGV4` authentication.
	// +kubebuilder:validation:Optional
	SecretKeySecretRef *v1.SecretKeySelector `json:"secretKeySecretRef,omitempty" tf:"-"`

	// Service name for `SIGV4` authentication.
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Session token for `SIGV4` authentication.
	// +kubebuilder:validation:Optional
	SessionToken *string `json:"sessionToken,omitempty" tf:"session_token,omitempty"`

	// Type of basic authentication to use when performing the test.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Username for authentication.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Workstation for `ntlm` authentication.
	// +kubebuilder:validation:Optional
	Workstation *string `json:"workstation,omitempty" tf:"workstation,omitempty"`
}

type RequestClientCertificateCertInitParameters struct {

	// File name for the certificate.
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`
}

type RequestClientCertificateCertObservation struct {

	// File name for the certificate.
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`
}

type RequestClientCertificateCertParameters struct {

	// Content of the certificate.
	// +kubebuilder:validation:Required
	ContentSecretRef v1.SecretKeySelector `json:"contentSecretRef" tf:"-"`

	// File name for the certificate.
	// +kubebuilder:validation:Optional
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`
}

type RequestClientCertificateInitParameters struct {
	Cert []CertInitParameters `json:"cert,omitempty" tf:"cert,omitempty"`

	Key []KeyInitParameters `json:"key,omitempty" tf:"key,omitempty"`
}

type RequestClientCertificateKeyInitParameters struct {

	// File name for the certificate.
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`
}

type RequestClientCertificateKeyObservation struct {

	// File name for the certificate.
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`
}

type RequestClientCertificateKeyParameters struct {

	// Content of the certificate.
	// +kubebuilder:validation:Required
	ContentSecretRef v1.SecretKeySelector `json:"contentSecretRef" tf:"-"`

	// File name for the certificate.
	// +kubebuilder:validation:Optional
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`
}

type RequestClientCertificateObservation struct {
	Cert []CertObservation `json:"cert,omitempty" tf:"cert,omitempty"`

	Key []KeyObservation `json:"key,omitempty" tf:"key,omitempty"`
}

type RequestClientCertificateParameters struct {

	// +kubebuilder:validation:Optional
	Cert []CertParameters `json:"cert,omitempty" tf:"cert,omitempty"`

	// +kubebuilder:validation:Optional
	Key []KeyParameters `json:"key,omitempty" tf:"key,omitempty"`
}

type RequestDefinitionInitParameters struct {

	// Allows loading insecure content for an HTTP test.
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// The request body.
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// DNS server to use for DNS tests (`subtype = "dns"`).
	DNSServer *string `json:"dnsServer,omitempty" tf:"dns_server,omitempty"`

	// DNS server port to use for DNS tests.
	DNSServerPort *float64 `json:"dnsServerPort,omitempty" tf:"dns_server_port,omitempty"`

	// Determines whether or not the API HTTP test should follow redirects.
	FollowRedirects *bool `json:"followRedirects,omitempty" tf:"follow_redirects,omitempty"`

	// Host name to perform the test with.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// For UDP and websocket tests, message to send with the request.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// The HTTP method. Valid values are `GET`, `POST`, `PATCH`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// Determines whether or not to save the response body.
	NoSavingResponseBody *bool `json:"noSavingResponseBody,omitempty" tf:"no_saving_response_body,omitempty"`

	// Number of pings to use per test for ICMP tests (`subtype = "icmp"`) between 0 and 10.
	NumberOfPackets *float64 `json:"numberOfPackets,omitempty" tf:"number_of_packets,omitempty"`

	// Port to use when performing the test.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
	Servername *string `json:"servername,omitempty" tf:"servername,omitempty"`

	// This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = "icmp"`).
	ShouldTrackHops *bool `json:"shouldTrackHops,omitempty" tf:"should_track_hops,omitempty"`

	// Timeout in seconds for the test. Defaults to `60`.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// The URL to send the request to.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type RequestDefinitionObservation struct {

	// Allows loading insecure content for an HTTP test.
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// The request body.
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// DNS server to use for DNS tests (`subtype = "dns"`).
	DNSServer *string `json:"dnsServer,omitempty" tf:"dns_server,omitempty"`

	// DNS server port to use for DNS tests.
	DNSServerPort *float64 `json:"dnsServerPort,omitempty" tf:"dns_server_port,omitempty"`

	// Determines whether or not the API HTTP test should follow redirects.
	FollowRedirects *bool `json:"followRedirects,omitempty" tf:"follow_redirects,omitempty"`

	// Host name to perform the test with.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// For UDP and websocket tests, message to send with the request.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// The HTTP method. Valid values are `GET`, `POST`, `PATCH`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// Determines whether or not to save the response body.
	NoSavingResponseBody *bool `json:"noSavingResponseBody,omitempty" tf:"no_saving_response_body,omitempty"`

	// Number of pings to use per test for ICMP tests (`subtype = "icmp"`) between 0 and 10.
	NumberOfPackets *float64 `json:"numberOfPackets,omitempty" tf:"number_of_packets,omitempty"`

	// Port to use when performing the test.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
	Servername *string `json:"servername,omitempty" tf:"servername,omitempty"`

	// This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = "icmp"`).
	ShouldTrackHops *bool `json:"shouldTrackHops,omitempty" tf:"should_track_hops,omitempty"`

	// Timeout in seconds for the test. Defaults to `60`.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// The URL to send the request to.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type RequestDefinitionParameters struct {

	// Allows loading insecure content for an HTTP test.
	// +kubebuilder:validation:Optional
	AllowInsecure *bool `json:"allowInsecure,omitempty" tf:"allow_insecure,omitempty"`

	// The request body.
	// +kubebuilder:validation:Optional
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// DNS server to use for DNS tests (`subtype = "dns"`).
	// +kubebuilder:validation:Optional
	DNSServer *string `json:"dnsServer,omitempty" tf:"dns_server,omitempty"`

	// DNS server port to use for DNS tests.
	// +kubebuilder:validation:Optional
	DNSServerPort *float64 `json:"dnsServerPort,omitempty" tf:"dns_server_port,omitempty"`

	// Determines whether or not the API HTTP test should follow redirects.
	// +kubebuilder:validation:Optional
	FollowRedirects *bool `json:"followRedirects,omitempty" tf:"follow_redirects,omitempty"`

	// Host name to perform the test with.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// For UDP and websocket tests, message to send with the request.
	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// The HTTP method. Valid values are `GET`, `POST`, `PATCH`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`.
	// +kubebuilder:validation:Optional
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// Determines whether or not to save the response body.
	// +kubebuilder:validation:Optional
	NoSavingResponseBody *bool `json:"noSavingResponseBody,omitempty" tf:"no_saving_response_body,omitempty"`

	// Number of pings to use per test for ICMP tests (`subtype = "icmp"`) between 0 and 10.
	// +kubebuilder:validation:Optional
	NumberOfPackets *float64 `json:"numberOfPackets,omitempty" tf:"number_of_packets,omitempty"`

	// Port to use when performing the test.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
	// +kubebuilder:validation:Optional
	Servername *string `json:"servername,omitempty" tf:"servername,omitempty"`

	// This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = "icmp"`).
	// +kubebuilder:validation:Optional
	ShouldTrackHops *bool `json:"shouldTrackHops,omitempty" tf:"should_track_hops,omitempty"`

	// Timeout in seconds for the test. Defaults to `60`.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// The URL to send the request to.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type RequestProxyInitParameters struct {

	// Header name and value map.
	Headers map[string]*string `json:"headers,omitempty" tf:"headers,omitempty"`

	// URL of the proxy to perform the test.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type RequestProxyObservation struct {

	// Header name and value map.
	Headers map[string]*string `json:"headers,omitempty" tf:"headers,omitempty"`

	// URL of the proxy to perform the test.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type RequestProxyParameters struct {

	// Header name and value map.
	// +kubebuilder:validation:Optional
	Headers map[string]*string `json:"headers,omitempty" tf:"headers,omitempty"`

	// URL of the proxy to perform the test.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type RetryInitParameters struct {

	// Number of retries needed to consider a location as failed before sending a notification alert.
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// Interval between a failed test and the next retry in milliseconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RetryObservation struct {

	// Number of retries needed to consider a location as failed before sending a notification alert.
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// Interval between a failed test and the next retry in milliseconds.
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type RetryParameters struct {

	// Number of retries needed to consider a location as failed before sending a notification alert.
	// +kubebuilder:validation:Optional
	Count *float64 `json:"count,omitempty" tf:"count,omitempty"`

	// Interval between a failed test and the next retry in milliseconds.
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`
}

type TargetjsonpathInitParameters struct {

	// The JSON path to assert.
	Jsonpath *string `json:"jsonpath,omitempty" tf:"jsonpath,omitempty"`

	// The specific operator to use on the path.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Expected matching value.
	Targetvalue *string `json:"targetvalue,omitempty" tf:"targetvalue,omitempty"`
}

type TargetjsonpathObservation struct {

	// The JSON path to assert.
	Jsonpath *string `json:"jsonpath,omitempty" tf:"jsonpath,omitempty"`

	// The specific operator to use on the path.
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Expected matching value.
	Targetvalue *string `json:"targetvalue,omitempty" tf:"targetvalue,omitempty"`
}

type TargetjsonpathParameters struct {

	// The JSON path to assert.
	// +kubebuilder:validation:Optional
	Jsonpath *string `json:"jsonpath,omitempty" tf:"jsonpath,omitempty"`

	// The specific operator to use on the path.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// Expected matching value.
	// +kubebuilder:validation:Optional
	Targetvalue *string `json:"targetvalue,omitempty" tf:"targetvalue,omitempty"`
}

type TestAssertionInitParameters struct {

	// Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// If assertion type is `header`, this is the header name.
	Property *string `json:"property,omitempty" tf:"property,omitempty"`

	// Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.
	Targetjsonpath []AssertionTargetjsonpathInitParameters `json:"targetjsonpath,omitempty" tf:"targetjsonpath,omitempty"`

	// Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TestAssertionObservation struct {

	// Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// If assertion type is `header`, this is the header name.
	Property *string `json:"property,omitempty" tf:"property,omitempty"`

	// Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.
	Targetjsonpath []AssertionTargetjsonpathObservation `json:"targetjsonpath,omitempty" tf:"targetjsonpath,omitempty"`

	// Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TestAssertionParameters struct {

	// Assertion operator. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)).
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`

	// If assertion type is `header`, this is the header name.
	// +kubebuilder:validation:Optional
	Property *string `json:"property,omitempty" tf:"property,omitempty"`

	// Expected value. Depends on the assertion type, refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test) for details.
	// +kubebuilder:validation:Optional
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// Expected structure if `operator` is `validatesJSONPath`. Exactly one nested block is allowed with the structure below.
	// +kubebuilder:validation:Optional
	Targetjsonpath []AssertionTargetjsonpathParameters `json:"targetjsonpath,omitempty" tf:"targetjsonpath,omitempty"`

	// Type of assertion. **Note** Only some combinations of `type` and `operator` are valid (please refer to [Datadog documentation](https://docs.datadoghq.com/api/latest/synthetics/#create-a-test)). Valid values are `body`, `header`, `statusCode`, `certificate`, `responseTime`, `property`, `recordEvery`, `recordSome`, `tlsVersion`, `minTlsVersion`, `latency`, `packetLossPercentage`, `packetsReceived`, `networkHop`, `receivedMessage`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TestInitParameters struct {

	// Steps for multistep api tests
	APIStep []APIStepInitParameters `json:"apiStep,omitempty" tf:"api_step,omitempty"`

	// Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
	Assertion []TestAssertionInitParameters `json:"assertion,omitempty" tf:"assertion,omitempty"`

	// Steps for browser tests.
	BrowserStep []BrowserStepInitParameters `json:"browserStep,omitempty" tf:"browser_step,omitempty"`

	// Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
	BrowserVariable []BrowserVariableInitParameters `json:"browserVariable,omitempty" tf:"browser_variable,omitempty"`

	// Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
	ConfigVariable []ConfigVariableInitParameters `json:"configVariable,omitempty" tf:"config_variable,omitempty"`

	// Required if `type = "browser"`. Array with the different device IDs used to run the test. Valid values are `laptop_large`, `tablet`, `mobile_small`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.
	DeviceIds []*string `json:"deviceIds,omitempty" tf:"device_ids,omitempty"`

	// Array of locations used to run the test. Refer to [Datadog documentation](https://docs.datadoghq.com/synthetics/api_test/#request) for available locations (e.g. `aws:eu-central-1`).
	Locations []*string `json:"locations,omitempty" tf:"locations,omitempty"`

	// A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// Name of Datadog synthetics test.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	OptionsList []OptionsListInitParameters `json:"optionsList,omitempty" tf:"options_list,omitempty"`

	// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
	RequestBasicauth []TestRequestBasicauthInitParameters `json:"requestBasicauth,omitempty" tf:"request_basicauth,omitempty"`

	// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
	RequestClientCertificate []TestRequestClientCertificateInitParameters `json:"requestClientCertificate,omitempty" tf:"request_client_certificate,omitempty"`

	// Required if `type = "api"`. The synthetics test request.
	RequestDefinition []TestRequestDefinitionInitParameters `json:"requestDefinition,omitempty" tf:"request_definition,omitempty"`

	// Header name and value map.
	RequestHeaders map[string]*string `json:"requestHeaders,omitempty" tf:"request_headers,omitempty"`

	// The proxy to perform the test.
	RequestProxy []TestRequestProxyInitParameters `json:"requestProxy,omitempty" tf:"request_proxy,omitempty"`

	// Query arguments name and value map.
	RequestQuery map[string]*string `json:"requestQuery,omitempty" tf:"request_query,omitempty"`

	// Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.
	SetCookie *string `json:"setCookie,omitempty" tf:"set_cookie,omitempty"`

	// Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`.
	Subtype *string `json:"subtype,omitempty" tf:"subtype,omitempty"`

	// A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Synthetics test type. Valid values are `api`, `browser`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TestObservation struct {

	// Steps for multistep api tests
	APIStep []APIStepObservation `json:"apiStep,omitempty" tf:"api_step,omitempty"`

	// Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
	Assertion []TestAssertionObservation `json:"assertion,omitempty" tf:"assertion,omitempty"`

	// Steps for browser tests.
	BrowserStep []BrowserStepObservation `json:"browserStep,omitempty" tf:"browser_step,omitempty"`

	// Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
	BrowserVariable []BrowserVariableObservation `json:"browserVariable,omitempty" tf:"browser_variable,omitempty"`

	// Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
	ConfigVariable []ConfigVariableObservation `json:"configVariable,omitempty" tf:"config_variable,omitempty"`

	// Required if `type = "browser"`. Array with the different device IDs used to run the test. Valid values are `laptop_large`, `tablet`, `mobile_small`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.
	DeviceIds []*string `json:"deviceIds,omitempty" tf:"device_ids,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Array of locations used to run the test. Refer to [Datadog documentation](https://docs.datadoghq.com/synthetics/api_test/#request) for available locations (e.g. `aws:eu-central-1`).
	Locations []*string `json:"locations,omitempty" tf:"locations,omitempty"`

	// A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// ID of the monitor associated with the Datadog synthetics test.
	MonitorID *float64 `json:"monitorId,omitempty" tf:"monitor_id,omitempty"`

	// Name of Datadog synthetics test.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	OptionsList []OptionsListObservation `json:"optionsList,omitempty" tf:"options_list,omitempty"`

	// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
	RequestBasicauth []TestRequestBasicauthObservation `json:"requestBasicauth,omitempty" tf:"request_basicauth,omitempty"`

	// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
	RequestClientCertificate []TestRequestClientCertificateObservation `json:"requestClientCertificate,omitempty" tf:"request_client_certificate,omitempty"`

	// Required if `type = "api"`. The synthetics test request.
	RequestDefinition []TestRequestDefinitionObservation `json:"requestDefinition,omitempty" tf:"request_definition,omitempty"`

	// Header name and value map.
	RequestHeaders map[string]*string `json:"requestHeaders,omitempty" tf:"request_headers,omitempty"`

	// The proxy to perform the test.
	RequestProxy []TestRequestProxyObservation `json:"requestProxy,omitempty" tf:"request_proxy,omitempty"`

	// Query arguments name and value map.
	RequestQuery map[string]*string `json:"requestQuery,omitempty" tf:"request_query,omitempty"`

	// Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.
	SetCookie *string `json:"setCookie,omitempty" tf:"set_cookie,omitempty"`

	// Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`.
	Subtype *string `json:"subtype,omitempty" tf:"subtype,omitempty"`

	// A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Synthetics test type. Valid values are `api`, `browser`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TestParameters struct {

	// Steps for multistep api tests
	// +kubebuilder:validation:Optional
	APIStep []APIStepParameters `json:"apiStep,omitempty" tf:"api_step,omitempty"`

	// Assertions used for the test. Multiple `assertion` blocks are allowed with the structure below.
	// +kubebuilder:validation:Optional
	Assertion []TestAssertionParameters `json:"assertion,omitempty" tf:"assertion,omitempty"`

	// Steps for browser tests.
	// +kubebuilder:validation:Optional
	BrowserStep []BrowserStepParameters `json:"browserStep,omitempty" tf:"browser_step,omitempty"`

	// Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
	// +kubebuilder:validation:Optional
	BrowserVariable []BrowserVariableParameters `json:"browserVariable,omitempty" tf:"browser_variable,omitempty"`

	// Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
	// +kubebuilder:validation:Optional
	ConfigVariable []ConfigVariableParameters `json:"configVariable,omitempty" tf:"config_variable,omitempty"`

	// Required if `type = "browser"`. Array with the different device IDs used to run the test. Valid values are `laptop_large`, `tablet`, `mobile_small`, `chrome.laptop_large`, `chrome.tablet`, `chrome.mobile_small`, `firefox.laptop_large`, `firefox.tablet`, `firefox.mobile_small`, `edge.laptop_large`, `edge.tablet`, `edge.mobile_small`.
	// +kubebuilder:validation:Optional
	DeviceIds []*string `json:"deviceIds,omitempty" tf:"device_ids,omitempty"`

	// Array of locations used to run the test. Refer to [Datadog documentation](https://docs.datadoghq.com/synthetics/api_test/#request) for available locations (e.g. `aws:eu-central-1`).
	// +kubebuilder:validation:Optional
	Locations []*string `json:"locations,omitempty" tf:"locations,omitempty"`

	// A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by using the same `@username` notation as events.
	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// Name of Datadog synthetics test.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	OptionsList []OptionsListParameters `json:"optionsList,omitempty" tf:"options_list,omitempty"`

	// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
	// +kubebuilder:validation:Optional
	RequestBasicauth []TestRequestBasicauthParameters `json:"requestBasicauth,omitempty" tf:"request_basicauth,omitempty"`

	// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure below.
	// +kubebuilder:validation:Optional
	RequestClientCertificate []TestRequestClientCertificateParameters `json:"requestClientCertificate,omitempty" tf:"request_client_certificate,omitempty"`

	// Required if `type = "api"`. The synthetics test request.
	// +kubebuilder:validation:Optional
	RequestDefinition []TestRequestDefinitionParameters `json:"requestDefinition,omitempty" tf:"request_definition,omitempty"`

	// Header name and value map.
	// +kubebuilder:validation:Optional
	RequestHeaders map[string]*string `json:"requestHeaders,omitempty" tf:"request_headers,omitempty"`

	// The proxy to perform the test.
	// +kubebuilder:validation:Optional
	RequestProxy []TestRequestProxyParameters `json:"requestProxy,omitempty" tf:"request_proxy,omitempty"`

	// Query arguments name and value map.
	// +kubebuilder:validation:Optional
	RequestQuery map[string]*string `json:"requestQuery,omitempty" tf:"request_query,omitempty"`

	// Cookies to be used for a browser test request, using the [Set-Cookie](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie) syntax.
	// +kubebuilder:validation:Optional
	SetCookie *string `json:"setCookie,omitempty" tf:"set_cookie,omitempty"`

	// Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Valid values are `live`, `paused`.
	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The subtype of the Synthetic API test. Defaults to `http`. Valid values are `http`, `ssl`, `tcp`, `dns`, `multi`, `icmp`, `udp`, `websocket`.
	// +kubebuilder:validation:Optional
	Subtype *string `json:"subtype,omitempty" tf:"subtype,omitempty"`

	// A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage synthetics page of the UI. Default is an empty list (`[]`).
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// Synthetics test type. Valid values are `api`, `browser`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TestRequestBasicauthInitParameters struct {

	// Domain for `ntlm` authentication.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Region for `SIGV4` authentication.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Service name for `SIGV4` authentication.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Session token for `SIGV4` authentication.
	SessionToken *string `json:"sessionToken,omitempty" tf:"session_token,omitempty"`

	// Type of basic authentication to use when performing the test.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Username for authentication.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Workstation for `ntlm` authentication.
	Workstation *string `json:"workstation,omitempty" tf:"workstation,omitempty"`
}

type TestRequestBasicauthObservation struct {

	// Domain for `ntlm` authentication.
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Region for `SIGV4` authentication.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Service name for `SIGV4` authentication.
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Session token for `SIGV4` authentication.
	SessionToken *string `json:"sessionToken,omitempty" tf:"session_token,omitempty"`

	// Type of basic authentication to use when performing the test.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Username for authentication.
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Workstation for `ntlm` authentication.
	Workstation *string `json:"workstation,omitempty" tf:"workstation,omitempty"`
}

type TestRequestBasicauthParameters struct {

	// Access key for `SIGV4` authentication.
	// +kubebuilder:validation:Optional
	AccessKeySecretRef *v1.SecretKeySelector `json:"accessKeySecretRef,omitempty" tf:"-"`

	// Domain for `ntlm` authentication.
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Password for authentication.
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// Region for `SIGV4` authentication.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Secret key for `SIGV4` authentication.
	// +kubebuilder:validation:Optional
	SecretKeySecretRef *v1.SecretKeySelector `json:"secretKeySecretRef,omitempty" tf:"-"`

	// Service name for `SIGV4` authentication.
	// +kubebuilder:validation:Optional
	ServiceName *string `json:"serviceName,omitempty" tf:"service_name,omitempty"`

	// Session token for `SIGV4` authentication.
	// +kubebuilder:validation:Optional
	SessionToken *string `json:"sessionToken,omitempty" tf:"session_token,omitempty"`

	// Type of basic authentication to use when performing the test.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Username for authentication.
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// Workstation for `ntlm` authentication.
	// +kubebuilder:validation:Optional
	Workstation *string `json:"workstation,omitempty" tf:"workstation,omitempty"`
}

type TestRequestClientCertificateInitParameters struct {
	Cert []RequestClientCertificateCertInitParameters `json:"cert,omitempty" tf:"cert,omitempty"`

	Key []RequestClientCertificateKeyInitParameters `json:"key,omitempty" tf:"key,omitempty"`
}

type TestRequestClientCertificateObservation struct {
	Cert []RequestClientCertificateCertObservation `json:"cert,omitempty" tf:"cert,omitempty"`

	Key []RequestClientCertificateKeyObservation `json:"key,omitempty" tf:"key,omitempty"`
}

type TestRequestClientCertificateParameters struct {

	// +kubebuilder:validation:Optional
	Cert []RequestClientCertificateCertParameters `json:"cert,omitempty" tf:"cert,omitempty"`

	// +kubebuilder:validation:Optional
	Key []RequestClientCertificateKeyParameters `json:"key,omitempty" tf:"key,omitempty"`
}

type TestRequestDefinitionInitParameters struct {

	// The request body.
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// DNS server to use for DNS tests (`subtype = "dns"`).
	DNSServer *string `json:"dnsServer,omitempty" tf:"dns_server,omitempty"`

	// DNS server port to use for DNS tests.
	DNSServerPort *float64 `json:"dnsServerPort,omitempty" tf:"dns_server_port,omitempty"`

	// Host name to perform the test with.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// For UDP and websocket tests, message to send with the request.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// The HTTP method. Valid values are `GET`, `POST`, `PATCH`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// Determines whether or not to save the response body.
	NoSavingResponseBody *bool `json:"noSavingResponseBody,omitempty" tf:"no_saving_response_body,omitempty"`

	// Number of pings to use per test for ICMP tests (`subtype = "icmp"`) between 0 and 10.
	NumberOfPackets *float64 `json:"numberOfPackets,omitempty" tf:"number_of_packets,omitempty"`

	// Port to use when performing the test.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
	Servername *string `json:"servername,omitempty" tf:"servername,omitempty"`

	// This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = "icmp"`).
	ShouldTrackHops *bool `json:"shouldTrackHops,omitempty" tf:"should_track_hops,omitempty"`

	// Timeout in seconds for the test. Defaults to `60`.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// The URL to send the request to.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type TestRequestDefinitionObservation struct {

	// The request body.
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// DNS server to use for DNS tests (`subtype = "dns"`).
	DNSServer *string `json:"dnsServer,omitempty" tf:"dns_server,omitempty"`

	// DNS server port to use for DNS tests.
	DNSServerPort *float64 `json:"dnsServerPort,omitempty" tf:"dns_server_port,omitempty"`

	// Host name to perform the test with.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// For UDP and websocket tests, message to send with the request.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// The HTTP method. Valid values are `GET`, `POST`, `PATCH`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`.
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// Determines whether or not to save the response body.
	NoSavingResponseBody *bool `json:"noSavingResponseBody,omitempty" tf:"no_saving_response_body,omitempty"`

	// Number of pings to use per test for ICMP tests (`subtype = "icmp"`) between 0 and 10.
	NumberOfPackets *float64 `json:"numberOfPackets,omitempty" tf:"number_of_packets,omitempty"`

	// Port to use when performing the test.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
	Servername *string `json:"servername,omitempty" tf:"servername,omitempty"`

	// This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = "icmp"`).
	ShouldTrackHops *bool `json:"shouldTrackHops,omitempty" tf:"should_track_hops,omitempty"`

	// Timeout in seconds for the test. Defaults to `60`.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// The URL to send the request to.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type TestRequestDefinitionParameters struct {

	// The request body.
	// +kubebuilder:validation:Optional
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// DNS server to use for DNS tests (`subtype = "dns"`).
	// +kubebuilder:validation:Optional
	DNSServer *string `json:"dnsServer,omitempty" tf:"dns_server,omitempty"`

	// DNS server port to use for DNS tests.
	// +kubebuilder:validation:Optional
	DNSServerPort *float64 `json:"dnsServerPort,omitempty" tf:"dns_server_port,omitempty"`

	// Host name to perform the test with.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// For UDP and websocket tests, message to send with the request.
	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// The HTTP method. Valid values are `GET`, `POST`, `PATCH`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`.
	// +kubebuilder:validation:Optional
	Method *string `json:"method,omitempty" tf:"method,omitempty"`

	// Determines whether or not to save the response body.
	// +kubebuilder:validation:Optional
	NoSavingResponseBody *bool `json:"noSavingResponseBody,omitempty" tf:"no_saving_response_body,omitempty"`

	// Number of pings to use per test for ICMP tests (`subtype = "icmp"`) between 0 and 10.
	// +kubebuilder:validation:Optional
	NumberOfPackets *float64 `json:"numberOfPackets,omitempty" tf:"number_of_packets,omitempty"`

	// Port to use when performing the test.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// For SSL tests, it specifies on which server you want to initiate the TLS handshake, allowing the server to present one of multiple possible certificates on the same IP address and TCP port number.
	// +kubebuilder:validation:Optional
	Servername *string `json:"servername,omitempty" tf:"servername,omitempty"`

	// This will turn on a traceroute probe to discover all gateways along the path to the host destination. For ICMP tests (`subtype = "icmp"`).
	// +kubebuilder:validation:Optional
	ShouldTrackHops *bool `json:"shouldTrackHops,omitempty" tf:"should_track_hops,omitempty"`

	// Timeout in seconds for the test. Defaults to `60`.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// The URL to send the request to.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type TestRequestProxyInitParameters struct {

	// Header name and value map.
	Headers map[string]*string `json:"headers,omitempty" tf:"headers,omitempty"`

	// URL of the proxy to perform the test.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type TestRequestProxyObservation struct {

	// Header name and value map.
	Headers map[string]*string `json:"headers,omitempty" tf:"headers,omitempty"`

	// URL of the proxy to perform the test.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type TestRequestProxyParameters struct {

	// Header name and value map.
	// +kubebuilder:validation:Optional
	Headers map[string]*string `json:"headers,omitempty" tf:"headers,omitempty"`

	// URL of the proxy to perform the test.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type ValueInitParameters struct {
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ValueObservation struct {
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ValueParameters struct {

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type VariableInitParameters struct {

	// Example of the extracted variable.
	Example *string `json:"example,omitempty" tf:"example,omitempty"`

	// Name of the extracted variable.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type VariableObservation struct {

	// Example of the extracted variable.
	Example *string `json:"example,omitempty" tf:"example,omitempty"`

	// Name of the extracted variable.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type VariableParameters struct {

	// Example of the extracted variable.
	// +kubebuilder:validation:Optional
	Example *string `json:"example,omitempty" tf:"example,omitempty"`

	// Name of the extracted variable.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// TestSpec defines the desired state of Test
type TestSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TestParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TestInitParameters `json:"initProvider,omitempty"`
}

// TestStatus defines the observed state of Test.
type TestStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TestObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Test is the Schema for the Tests API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type Test struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.locations) || has(self.initProvider.locations)",message="locations is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.status) || has(self.initProvider.status)",message="status is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || has(self.initProvider.type)",message="type is a required parameter"
	Spec   TestSpec   `json:"spec"`
	Status TestStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TestList contains a list of Tests
type TestList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Test `json:"items"`
}

// Repository type metadata.
var (
	Test_Kind             = "Test"
	Test_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Test_Kind}.String()
	Test_KindAPIVersion   = Test_Kind + "." + CRDGroupVersion.String()
	Test_GroupVersionKind = CRDGroupVersion.WithKind(Test_Kind)
)

func init() {
	SchemeBuilder.Register(&Test{}, &TestList{})
}
