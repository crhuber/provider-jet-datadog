/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DashboardJSONInitParameters struct {

	// The JSON formatted definition of the Dashboard.
	Dashboard *string `json:"dashboard,omitempty" tf:"dashboard,omitempty"`

	// The list of dashboard lists this dashboard belongs to.
	DashboardLists []*float64 `json:"dashboardLists,omitempty" tf:"dashboard_lists,omitempty"`

	// The URL of the dashboard.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type DashboardJSONObservation struct {

	// The JSON formatted definition of the Dashboard.
	Dashboard *string `json:"dashboard,omitempty" tf:"dashboard,omitempty"`

	// The list of dashboard lists this dashboard belongs to.
	DashboardLists []*float64 `json:"dashboardLists,omitempty" tf:"dashboard_lists,omitempty"`

	// The list of dashboard lists this dashboard should be removed from. Internal only.
	DashboardListsRemoved []*float64 `json:"dashboardListsRemoved,omitempty" tf:"dashboard_lists_removed,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The URL of the dashboard.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type DashboardJSONParameters struct {

	// The JSON formatted definition of the Dashboard.
	// +kubebuilder:validation:Optional
	Dashboard *string `json:"dashboard,omitempty" tf:"dashboard,omitempty"`

	// The list of dashboard lists this dashboard belongs to.
	// +kubebuilder:validation:Optional
	DashboardLists []*float64 `json:"dashboardLists,omitempty" tf:"dashboard_lists,omitempty"`

	// The URL of the dashboard.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

// DashboardJSONSpec defines the desired state of DashboardJSON
type DashboardJSONSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DashboardJSONParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DashboardJSONInitParameters `json:"initProvider,omitempty"`
}

// DashboardJSONStatus defines the observed state of DashboardJSON.
type DashboardJSONStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DashboardJSONObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DashboardJSON is the Schema for the DashboardJSONs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type DashboardJSON struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dashboard) || has(self.initProvider.dashboard)",message="dashboard is a required parameter"
	Spec   DashboardJSONSpec   `json:"spec"`
	Status DashboardJSONStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DashboardJSONList contains a list of DashboardJSONs
type DashboardJSONList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DashboardJSON `json:"items"`
}

// Repository type metadata.
var (
	DashboardJSON_Kind             = "DashboardJSON"
	DashboardJSON_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DashboardJSON_Kind}.String()
	DashboardJSON_KindAPIVersion   = DashboardJSON_Kind + "." + CRDGroupVersion.String()
	DashboardJSON_GroupVersionKind = CRDGroupVersion.WithKind(DashboardJSON_Kind)
)

func init() {
	SchemeBuilder.Register(&DashboardJSON{}, &DashboardJSONList{})
}
