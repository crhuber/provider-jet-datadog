/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MonitorInitParameters struct {

	// A boolean indicating whether or not to include a list of log values which triggered the alert. This is only used by log monitors. Defaults to `false`.
	EnableLogsSample *bool `json:"enableLogsSample,omitempty" tf:"enable_logs_sample,omitempty"`

	// A message to include with a re-notification. Supports the `@username` notification allowed elsewhere.
	EscalationMessage *string `json:"escalationMessage,omitempty" tf:"escalation_message,omitempty"`

	// (Only applies to metric alert) Time (in seconds) to delay evaluation, as a non-negative integer.
	//
	// For example, if the value is set to `300` (5min), the `timeframe` is set to `last_5m` and the time is 7:00, the monitor will evaluate data from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled metrics to ensure the monitor will always have data during evaluation.
	EvaluationDelay *float64 `json:"evaluationDelay,omitempty" tf:"evaluation_delay,omitempty"`

	// A boolean indicating whether this monitor can be deleted even if it’s referenced by other resources (e.g. SLO, composite monitor).
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete,omitempty"`

	// Whether or not to trigger one alert if any source breaches a threshold. This is only used by log monitors. Defaults to `false`.
	GroupbySimpleMonitor *bool `json:"groupbySimpleMonitor,omitempty" tf:"groupby_simple_monitor,omitempty"`

	// A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title. Defaults to `true`.
	IncludeTags *bool `json:"includeTags,omitempty" tf:"include_tags,omitempty"`

	// A boolean indicating whether changes to this monitor should be restricted to the creator or admins. Defaults to `false`. **Deprecated.** Use `restricted_roles`.
	Locked *bool `json:"locked,omitempty" tf:"locked,omitempty"`

	// A message to include with notifications for this monitor.
	//
	// Email notifications can be sent to specific users by using the same `@username` notation as events.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// A mapping containing `recovery_window` and `trigger_window` values, e.g. `last_15m` . Can only be used for, and are required for, anomaly monitors.
	MonitorThresholdWindows []MonitorThresholdWindowsInitParameters `json:"monitorThresholdWindows,omitempty" tf:"monitor_threshold_windows,omitempty"`

	// Alert thresholds of the monitor.
	MonitorThresholds []MonitorThresholdsInitParameters `json:"monitorThresholds,omitempty" tf:"monitor_thresholds,omitempty"`

	// Name of Datadog monitor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The time (in seconds) to skip evaluations for new groups.
	//
	// `new_group_delay` overrides `new_host_delay` if it is set to a nonzero value.
	NewGroupDelay *float64 `json:"newGroupDelay,omitempty" tf:"new_group_delay,omitempty"`

	// **Deprecated**. See `new_group_delay`. Time (in seconds) to allow a host to boot and applications to fully start before starting the evaluation of monitor results. Should be a non-negative integer. This value is ignored for simple monitors and monitors not grouped by host. Defaults to `300`. The only case when this should be used is to override the default and set `new_host_delay` to zero for monitors grouped by host. **Deprecated.** Use `new_group_delay` except when setting `new_host_delay` to zero.
	NewHostDelay *float64 `json:"newHostDelay,omitempty" tf:"new_host_delay,omitempty"`

	// The number of minutes before a monitor will notify when data stops reporting. Provider defaults to 10 minutes.
	//
	// We recommend at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks.
	NoDataTimeframe *float64 `json:"noDataTimeframe,omitempty" tf:"no_data_timeframe,omitempty"`

	// A boolean indicating whether tagged users will be notified on changes to this monitor. Defaults to `false`.
	NotifyAudit *bool `json:"notifyAudit,omitempty" tf:"notify_audit,omitempty"`

	// A boolean indicating whether this monitor will notify when data stops reporting. Defaults to `false`.
	NotifyNoData *bool `json:"notifyNoData,omitempty" tf:"notify_no_data,omitempty"`

	// Integer from 1 (high) to 5 (low) indicating alert severity.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// The monitor query to notify on. Note this is not the same query you see in the UI and the syntax is different depending on the monitor type, please see the [API Reference](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor) for details.
	//
	// **Note:** APM latency data is now available as Distribution Metrics. We strongly recommend updating monitor definitions to query the new metrics.datadoghq.com/tracing/guide/ddsketch_trace_metrics/).
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// The number of minutes after the last notification before a monitor will re-notify on the current status. It will only re-notify if it's not resolved.
	RenotifyInterval *float64 `json:"renotifyInterval,omitempty" tf:"renotify_interval,omitempty"`

	// The number of re-notification messages that should be sent on the current status.
	RenotifyOccurrences *float64 `json:"renotifyOccurrences,omitempty" tf:"renotify_occurrences,omitempty"`

	// The types of statuses for which re-notification messages should be sent. Valid values are `alert`, `warn`, `no data`.
	RenotifyStatuses []*string `json:"renotifyStatuses,omitempty" tf:"renotify_statuses,omitempty"`

	// A boolean indicating whether this monitor needs a full window of data before it's evaluated.
	//
	// We highly recommend you set this to `false` for sparse metrics, otherwise some evaluations will be skipped. Default: `true` for `on average`, `at all times` and `in total` aggregation. `false` otherwise.
	RequireFullWindow *bool `json:"requireFullWindow,omitempty" tf:"require_full_window,omitempty"`

	// A list of unique role identifiers to define which roles are allowed to edit the monitor. Editing a monitor includes any updates to the monitor configuration, monitor deletion, and muting of the monitor for any amount of time. Roles unique identifiers can be pulled from the [Roles API](https://docs.datadoghq.com/api/latest/roles/#list-roles) in the `data.id` field.
	RestrictedRoles []*string `json:"restrictedRoles,omitempty" tf:"restricted_roles,omitempty"`

	// A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The number of hours of the monitor not reporting data before it automatically resolves from a triggered state. The minimum allowed value is 0 hours. The maximum allowed value is 24 hours.
	TimeoutH *float64 `json:"timeoutH,omitempty" tf:"timeout_h,omitempty"`

	// The type of the monitor. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation page](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor). Note: The monitor type cannot be changed after a monitor is created. Valid values are `composite`, `event alert`, `log alert`, `metric alert`, `process alert`, `query alert`, `rum alert`, `service check`, `synthetics alert`, `trace-analytics alert`, `slo alert`, `event-v2 alert`, `audit alert`, `ci-pipelines alert`, `error-tracking alert`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// If set to `false`, skip the validation call done during plan.
	Validate *bool `json:"validate,omitempty" tf:"validate,omitempty"`
}

type MonitorObservation struct {

	// A boolean indicating whether or not to include a list of log values which triggered the alert. This is only used by log monitors. Defaults to `false`.
	EnableLogsSample *bool `json:"enableLogsSample,omitempty" tf:"enable_logs_sample,omitempty"`

	// A message to include with a re-notification. Supports the `@username` notification allowed elsewhere.
	EscalationMessage *string `json:"escalationMessage,omitempty" tf:"escalation_message,omitempty"`

	// (Only applies to metric alert) Time (in seconds) to delay evaluation, as a non-negative integer.
	//
	// For example, if the value is set to `300` (5min), the `timeframe` is set to `last_5m` and the time is 7:00, the monitor will evaluate data from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled metrics to ensure the monitor will always have data during evaluation.
	EvaluationDelay *float64 `json:"evaluationDelay,omitempty" tf:"evaluation_delay,omitempty"`

	// A boolean indicating whether this monitor can be deleted even if it’s referenced by other resources (e.g. SLO, composite monitor).
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete,omitempty"`

	// Whether or not to trigger one alert if any source breaches a threshold. This is only used by log monitors. Defaults to `false`.
	GroupbySimpleMonitor *bool `json:"groupbySimpleMonitor,omitempty" tf:"groupby_simple_monitor,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title. Defaults to `true`.
	IncludeTags *bool `json:"includeTags,omitempty" tf:"include_tags,omitempty"`

	// A boolean indicating whether changes to this monitor should be restricted to the creator or admins. Defaults to `false`. **Deprecated.** Use `restricted_roles`.
	Locked *bool `json:"locked,omitempty" tf:"locked,omitempty"`

	// A message to include with notifications for this monitor.
	//
	// Email notifications can be sent to specific users by using the same `@username` notation as events.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// A mapping containing `recovery_window` and `trigger_window` values, e.g. `last_15m` . Can only be used for, and are required for, anomaly monitors.
	MonitorThresholdWindows []MonitorThresholdWindowsObservation `json:"monitorThresholdWindows,omitempty" tf:"monitor_threshold_windows,omitempty"`

	// Alert thresholds of the monitor.
	MonitorThresholds []MonitorThresholdsObservation `json:"monitorThresholds,omitempty" tf:"monitor_thresholds,omitempty"`

	// Name of Datadog monitor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The time (in seconds) to skip evaluations for new groups.
	//
	// `new_group_delay` overrides `new_host_delay` if it is set to a nonzero value.
	NewGroupDelay *float64 `json:"newGroupDelay,omitempty" tf:"new_group_delay,omitempty"`

	// **Deprecated**. See `new_group_delay`. Time (in seconds) to allow a host to boot and applications to fully start before starting the evaluation of monitor results. Should be a non-negative integer. This value is ignored for simple monitors and monitors not grouped by host. Defaults to `300`. The only case when this should be used is to override the default and set `new_host_delay` to zero for monitors grouped by host. **Deprecated.** Use `new_group_delay` except when setting `new_host_delay` to zero.
	NewHostDelay *float64 `json:"newHostDelay,omitempty" tf:"new_host_delay,omitempty"`

	// The number of minutes before a monitor will notify when data stops reporting. Provider defaults to 10 minutes.
	//
	// We recommend at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks.
	NoDataTimeframe *float64 `json:"noDataTimeframe,omitempty" tf:"no_data_timeframe,omitempty"`

	// A boolean indicating whether tagged users will be notified on changes to this monitor. Defaults to `false`.
	NotifyAudit *bool `json:"notifyAudit,omitempty" tf:"notify_audit,omitempty"`

	// A boolean indicating whether this monitor will notify when data stops reporting. Defaults to `false`.
	NotifyNoData *bool `json:"notifyNoData,omitempty" tf:"notify_no_data,omitempty"`

	// Integer from 1 (high) to 5 (low) indicating alert severity.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// The monitor query to notify on. Note this is not the same query you see in the UI and the syntax is different depending on the monitor type, please see the [API Reference](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor) for details.
	//
	// **Note:** APM latency data is now available as Distribution Metrics. We strongly recommend updating monitor definitions to query the new metrics.datadoghq.com/tracing/guide/ddsketch_trace_metrics/).
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// The number of minutes after the last notification before a monitor will re-notify on the current status. It will only re-notify if it's not resolved.
	RenotifyInterval *float64 `json:"renotifyInterval,omitempty" tf:"renotify_interval,omitempty"`

	// The number of re-notification messages that should be sent on the current status.
	RenotifyOccurrences *float64 `json:"renotifyOccurrences,omitempty" tf:"renotify_occurrences,omitempty"`

	// The types of statuses for which re-notification messages should be sent. Valid values are `alert`, `warn`, `no data`.
	RenotifyStatuses []*string `json:"renotifyStatuses,omitempty" tf:"renotify_statuses,omitempty"`

	// A boolean indicating whether this monitor needs a full window of data before it's evaluated.
	//
	// We highly recommend you set this to `false` for sparse metrics, otherwise some evaluations will be skipped. Default: `true` for `on average`, `at all times` and `in total` aggregation. `false` otherwise.
	RequireFullWindow *bool `json:"requireFullWindow,omitempty" tf:"require_full_window,omitempty"`

	// A list of unique role identifiers to define which roles are allowed to edit the monitor. Editing a monitor includes any updates to the monitor configuration, monitor deletion, and muting of the monitor for any amount of time. Roles unique identifiers can be pulled from the [Roles API](https://docs.datadoghq.com/api/latest/roles/#list-roles) in the `data.id` field.
	RestrictedRoles []*string `json:"restrictedRoles,omitempty" tf:"restricted_roles,omitempty"`

	// A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The number of hours of the monitor not reporting data before it automatically resolves from a triggered state. The minimum allowed value is 0 hours. The maximum allowed value is 24 hours.
	TimeoutH *float64 `json:"timeoutH,omitempty" tf:"timeout_h,omitempty"`

	// The type of the monitor. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation page](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor). Note: The monitor type cannot be changed after a monitor is created. Valid values are `composite`, `event alert`, `log alert`, `metric alert`, `process alert`, `query alert`, `rum alert`, `service check`, `synthetics alert`, `trace-analytics alert`, `slo alert`, `event-v2 alert`, `audit alert`, `ci-pipelines alert`, `error-tracking alert`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// If set to `false`, skip the validation call done during plan.
	Validate *bool `json:"validate,omitempty" tf:"validate,omitempty"`
}

type MonitorParameters struct {

	// A boolean indicating whether or not to include a list of log values which triggered the alert. This is only used by log monitors. Defaults to `false`.
	// +kubebuilder:validation:Optional
	EnableLogsSample *bool `json:"enableLogsSample,omitempty" tf:"enable_logs_sample,omitempty"`

	// A message to include with a re-notification. Supports the `@username` notification allowed elsewhere.
	// +kubebuilder:validation:Optional
	EscalationMessage *string `json:"escalationMessage,omitempty" tf:"escalation_message,omitempty"`

	// (Only applies to metric alert) Time (in seconds) to delay evaluation, as a non-negative integer.
	//
	// For example, if the value is set to `300` (5min), the `timeframe` is set to `last_5m` and the time is 7:00, the monitor will evaluate data from 6:50 to 6:55. This is useful for AWS CloudWatch and other backfilled metrics to ensure the monitor will always have data during evaluation.
	// +kubebuilder:validation:Optional
	EvaluationDelay *float64 `json:"evaluationDelay,omitempty" tf:"evaluation_delay,omitempty"`

	// A boolean indicating whether this monitor can be deleted even if it’s referenced by other resources (e.g. SLO, composite monitor).
	// +kubebuilder:validation:Optional
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete,omitempty"`

	// Whether or not to trigger one alert if any source breaches a threshold. This is only used by log monitors. Defaults to `false`.
	// +kubebuilder:validation:Optional
	GroupbySimpleMonitor *bool `json:"groupbySimpleMonitor,omitempty" tf:"groupby_simple_monitor,omitempty"`

	// A boolean indicating whether notifications from this monitor automatically insert its triggering tags into the title. Defaults to `true`.
	// +kubebuilder:validation:Optional
	IncludeTags *bool `json:"includeTags,omitempty" tf:"include_tags,omitempty"`

	// A boolean indicating whether changes to this monitor should be restricted to the creator or admins. Defaults to `false`. **Deprecated.** Use `restricted_roles`.
	// +kubebuilder:validation:Optional
	Locked *bool `json:"locked,omitempty" tf:"locked,omitempty"`

	// A message to include with notifications for this monitor.
	//
	// Email notifications can be sent to specific users by using the same `@username` notation as events.
	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// A mapping containing `recovery_window` and `trigger_window` values, e.g. `last_15m` . Can only be used for, and are required for, anomaly monitors.
	// +kubebuilder:validation:Optional
	MonitorThresholdWindows []MonitorThresholdWindowsParameters `json:"monitorThresholdWindows,omitempty" tf:"monitor_threshold_windows,omitempty"`

	// Alert thresholds of the monitor.
	// +kubebuilder:validation:Optional
	MonitorThresholds []MonitorThresholdsParameters `json:"monitorThresholds,omitempty" tf:"monitor_thresholds,omitempty"`

	// Name of Datadog monitor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The time (in seconds) to skip evaluations for new groups.
	//
	// `new_group_delay` overrides `new_host_delay` if it is set to a nonzero value.
	// +kubebuilder:validation:Optional
	NewGroupDelay *float64 `json:"newGroupDelay,omitempty" tf:"new_group_delay,omitempty"`

	// **Deprecated**. See `new_group_delay`. Time (in seconds) to allow a host to boot and applications to fully start before starting the evaluation of monitor results. Should be a non-negative integer. This value is ignored for simple monitors and monitors not grouped by host. Defaults to `300`. The only case when this should be used is to override the default and set `new_host_delay` to zero for monitors grouped by host. **Deprecated.** Use `new_group_delay` except when setting `new_host_delay` to zero.
	// +kubebuilder:validation:Optional
	NewHostDelay *float64 `json:"newHostDelay,omitempty" tf:"new_host_delay,omitempty"`

	// The number of minutes before a monitor will notify when data stops reporting. Provider defaults to 10 minutes.
	//
	// We recommend at least 2x the monitor timeframe for metric alerts or 2 minutes for service checks.
	// +kubebuilder:validation:Optional
	NoDataTimeframe *float64 `json:"noDataTimeframe,omitempty" tf:"no_data_timeframe,omitempty"`

	// A boolean indicating whether tagged users will be notified on changes to this monitor. Defaults to `false`.
	// +kubebuilder:validation:Optional
	NotifyAudit *bool `json:"notifyAudit,omitempty" tf:"notify_audit,omitempty"`

	// A boolean indicating whether this monitor will notify when data stops reporting. Defaults to `false`.
	// +kubebuilder:validation:Optional
	NotifyNoData *bool `json:"notifyNoData,omitempty" tf:"notify_no_data,omitempty"`

	// Integer from 1 (high) to 5 (low) indicating alert severity.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// The monitor query to notify on. Note this is not the same query you see in the UI and the syntax is different depending on the monitor type, please see the [API Reference](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor) for details.
	//
	// **Note:** APM latency data is now available as Distribution Metrics. We strongly recommend updating monitor definitions to query the new metrics.datadoghq.com/tracing/guide/ddsketch_trace_metrics/).
	// +kubebuilder:validation:Optional
	Query *string `json:"query,omitempty" tf:"query,omitempty"`

	// The number of minutes after the last notification before a monitor will re-notify on the current status. It will only re-notify if it's not resolved.
	// +kubebuilder:validation:Optional
	RenotifyInterval *float64 `json:"renotifyInterval,omitempty" tf:"renotify_interval,omitempty"`

	// The number of re-notification messages that should be sent on the current status.
	// +kubebuilder:validation:Optional
	RenotifyOccurrences *float64 `json:"renotifyOccurrences,omitempty" tf:"renotify_occurrences,omitempty"`

	// The types of statuses for which re-notification messages should be sent. Valid values are `alert`, `warn`, `no data`.
	// +kubebuilder:validation:Optional
	RenotifyStatuses []*string `json:"renotifyStatuses,omitempty" tf:"renotify_statuses,omitempty"`

	// A boolean indicating whether this monitor needs a full window of data before it's evaluated.
	//
	// We highly recommend you set this to `false` for sparse metrics, otherwise some evaluations will be skipped. Default: `true` for `on average`, `at all times` and `in total` aggregation. `false` otherwise.
	// +kubebuilder:validation:Optional
	RequireFullWindow *bool `json:"requireFullWindow,omitempty" tf:"require_full_window,omitempty"`

	// A list of unique role identifiers to define which roles are allowed to edit the monitor. Editing a monitor includes any updates to the monitor configuration, monitor deletion, and muting of the monitor for any amount of time. Roles unique identifiers can be pulled from the [Roles API](https://docs.datadoghq.com/api/latest/roles/#list-roles) in the `data.id` field.
	// +kubebuilder:validation:Optional
	RestrictedRoles []*string `json:"restrictedRoles,omitempty" tf:"restricted_roles,omitempty"`

	// A list of tags to associate with your monitor. This can help you categorize and filter monitors in the manage monitors page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// The number of hours of the monitor not reporting data before it automatically resolves from a triggered state. The minimum allowed value is 0 hours. The maximum allowed value is 24 hours.
	// +kubebuilder:validation:Optional
	TimeoutH *float64 `json:"timeoutH,omitempty" tf:"timeout_h,omitempty"`

	// The type of the monitor. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation page](https://docs.datadoghq.com/api/v1/monitors/#create-a-monitor). Note: The monitor type cannot be changed after a monitor is created. Valid values are `composite`, `event alert`, `log alert`, `metric alert`, `process alert`, `query alert`, `rum alert`, `service check`, `synthetics alert`, `trace-analytics alert`, `slo alert`, `event-v2 alert`, `audit alert`, `ci-pipelines alert`, `error-tracking alert`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// If set to `false`, skip the validation call done during plan.
	// +kubebuilder:validation:Optional
	Validate *bool `json:"validate,omitempty" tf:"validate,omitempty"`
}

type MonitorThresholdWindowsInitParameters struct {

	// Describes how long an anomalous metric must be normal before the alert recovers.
	RecoveryWindow *string `json:"recoveryWindow,omitempty" tf:"recovery_window,omitempty"`

	// Describes how long a metric must be anomalous before an alert triggers.
	TriggerWindow *string `json:"triggerWindow,omitempty" tf:"trigger_window,omitempty"`
}

type MonitorThresholdWindowsObservation struct {

	// Describes how long an anomalous metric must be normal before the alert recovers.
	RecoveryWindow *string `json:"recoveryWindow,omitempty" tf:"recovery_window,omitempty"`

	// Describes how long a metric must be anomalous before an alert triggers.
	TriggerWindow *string `json:"triggerWindow,omitempty" tf:"trigger_window,omitempty"`
}

type MonitorThresholdWindowsParameters struct {

	// Describes how long an anomalous metric must be normal before the alert recovers.
	// +kubebuilder:validation:Optional
	RecoveryWindow *string `json:"recoveryWindow,omitempty" tf:"recovery_window,omitempty"`

	// Describes how long a metric must be anomalous before an alert triggers.
	// +kubebuilder:validation:Optional
	TriggerWindow *string `json:"triggerWindow,omitempty" tf:"trigger_window,omitempty"`
}

type MonitorThresholdsInitParameters struct {

	// The monitor `CRITICAL` threshold. Must be a number.
	Critical *string `json:"critical,omitempty" tf:"critical,omitempty"`

	// The monitor `CRITICAL` recovery threshold. Must be a number.
	CriticalRecovery *string `json:"criticalRecovery,omitempty" tf:"critical_recovery,omitempty"`

	// The monitor `OK` threshold. Must be a number.
	Ok *string `json:"ok,omitempty" tf:"ok,omitempty"`

	// The monitor `UNKNOWN` threshold. Must be a number.
	Unknown *string `json:"unknown,omitempty" tf:"unknown,omitempty"`

	// The monitor `WARNING` threshold. Must be a number.
	Warning *string `json:"warning,omitempty" tf:"warning,omitempty"`

	// The monitor `WARNING` recovery threshold. Must be a number.
	WarningRecovery *string `json:"warningRecovery,omitempty" tf:"warning_recovery,omitempty"`
}

type MonitorThresholdsObservation struct {

	// The monitor `CRITICAL` threshold. Must be a number.
	Critical *string `json:"critical,omitempty" tf:"critical,omitempty"`

	// The monitor `CRITICAL` recovery threshold. Must be a number.
	CriticalRecovery *string `json:"criticalRecovery,omitempty" tf:"critical_recovery,omitempty"`

	// The monitor `OK` threshold. Must be a number.
	Ok *string `json:"ok,omitempty" tf:"ok,omitempty"`

	// The monitor `UNKNOWN` threshold. Must be a number.
	Unknown *string `json:"unknown,omitempty" tf:"unknown,omitempty"`

	// The monitor `WARNING` threshold. Must be a number.
	Warning *string `json:"warning,omitempty" tf:"warning,omitempty"`

	// The monitor `WARNING` recovery threshold. Must be a number.
	WarningRecovery *string `json:"warningRecovery,omitempty" tf:"warning_recovery,omitempty"`
}

type MonitorThresholdsParameters struct {

	// The monitor `CRITICAL` threshold. Must be a number.
	// +kubebuilder:validation:Optional
	Critical *string `json:"critical,omitempty" tf:"critical,omitempty"`

	// The monitor `CRITICAL` recovery threshold. Must be a number.
	// +kubebuilder:validation:Optional
	CriticalRecovery *string `json:"criticalRecovery,omitempty" tf:"critical_recovery,omitempty"`

	// The monitor `OK` threshold. Must be a number.
	// +kubebuilder:validation:Optional
	Ok *string `json:"ok,omitempty" tf:"ok,omitempty"`

	// The monitor `UNKNOWN` threshold. Must be a number.
	// +kubebuilder:validation:Optional
	Unknown *string `json:"unknown,omitempty" tf:"unknown,omitempty"`

	// The monitor `WARNING` threshold. Must be a number.
	// +kubebuilder:validation:Optional
	Warning *string `json:"warning,omitempty" tf:"warning,omitempty"`

	// The monitor `WARNING` recovery threshold. Must be a number.
	// +kubebuilder:validation:Optional
	WarningRecovery *string `json:"warningRecovery,omitempty" tf:"warning_recovery,omitempty"`
}

// MonitorSpec defines the desired state of Monitor
type MonitorSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MonitorParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MonitorInitParameters `json:"initProvider,omitempty"`
}

// MonitorStatus defines the observed state of Monitor.
type MonitorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MonitorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Monitor is the Schema for the Monitors API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type Monitor struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.message) || has(self.initProvider.message)",message="message is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.query) || has(self.initProvider.query)",message="query is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || has(self.initProvider.type)",message="type is a required parameter"
	Spec   MonitorSpec   `json:"spec"`
	Status MonitorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorList contains a list of Monitors
type MonitorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Monitor `json:"items"`
}

// Repository type metadata.
var (
	Monitor_Kind             = "Monitor"
	Monitor_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Monitor_Kind}.String()
	Monitor_KindAPIVersion   = Monitor_Kind + "." + CRDGroupVersion.String()
	Monitor_GroupVersionKind = CRDGroupVersion.WithKind(Monitor_Kind)
)

func init() {
	SchemeBuilder.Register(&Monitor{}, &MonitorList{})
}
