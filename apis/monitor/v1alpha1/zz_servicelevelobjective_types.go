/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type QueryInitParameters struct {

	// The sum of the `total` events.
	Denominator *string `json:"denominator,omitempty" tf:"denominator,omitempty"`

	// The sum of all the `good` events.
	Numerator *string `json:"numerator,omitempty" tf:"numerator,omitempty"`
}

type QueryObservation struct {

	// The sum of the `total` events.
	Denominator *string `json:"denominator,omitempty" tf:"denominator,omitempty"`

	// The sum of all the `good` events.
	Numerator *string `json:"numerator,omitempty" tf:"numerator,omitempty"`
}

type QueryParameters struct {

	// The sum of the `total` events.
	// +kubebuilder:validation:Optional
	Denominator *string `json:"denominator,omitempty" tf:"denominator,omitempty"`

	// The sum of all the `good` events.
	// +kubebuilder:validation:Optional
	Numerator *string `json:"numerator,omitempty" tf:"numerator,omitempty"`
}

type ServiceLevelObjectiveInitParameters struct {

	// A description of this service level objective.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A boolean indicating whether this monitor can be deleted even if it’s referenced by other resources (e.g. dashboards).
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete,omitempty"`

	// A static set of groups to filter monitor-based SLOs
	Groups []*string `json:"groups,omitempty" tf:"groups,omitempty"`

	// A static set of monitor IDs to use as part of the SLO
	MonitorIds []*float64 `json:"monitorIds,omitempty" tf:"monitor_ids,omitempty"`

	// Name of Datadog service level objective
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The metric query of good / total events
	Query []QueryInitParameters `json:"query,omitempty" tf:"query,omitempty"`

	// A list of tags to associate with your service level objective. This can help you categorize and filter service level objectives in the service level objectives page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A list of thresholds and targets that define the service level objectives from the provided SLIs.
	Thresholds []ThresholdsInitParameters `json:"thresholds,omitempty" tf:"thresholds,omitempty"`

	// The type of the service level objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation page](https://docs.datadoghq.com/api/v1/service-level-objectives/#create-a-slo-object). Valid values are `metric`, `monitor`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Whether or not to validate the SLO.
	Validate *bool `json:"validate,omitempty" tf:"validate,omitempty"`
}

type ServiceLevelObjectiveObservation struct {

	// A description of this service level objective.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A boolean indicating whether this monitor can be deleted even if it’s referenced by other resources (e.g. dashboards).
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete,omitempty"`

	// A static set of groups to filter monitor-based SLOs
	Groups []*string `json:"groups,omitempty" tf:"groups,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// A static set of monitor IDs to use as part of the SLO
	MonitorIds []*float64 `json:"monitorIds,omitempty" tf:"monitor_ids,omitempty"`

	// Name of Datadog service level objective
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The metric query of good / total events
	Query []QueryObservation `json:"query,omitempty" tf:"query,omitempty"`

	// A list of tags to associate with your service level objective. This can help you categorize and filter service level objectives in the service level objectives page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A list of thresholds and targets that define the service level objectives from the provided SLIs.
	Thresholds []ThresholdsObservation `json:"thresholds,omitempty" tf:"thresholds,omitempty"`

	// The type of the service level objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation page](https://docs.datadoghq.com/api/v1/service-level-objectives/#create-a-slo-object). Valid values are `metric`, `monitor`.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Whether or not to validate the SLO.
	Validate *bool `json:"validate,omitempty" tf:"validate,omitempty"`
}

type ServiceLevelObjectiveParameters struct {

	// A description of this service level objective.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// A boolean indicating whether this monitor can be deleted even if it’s referenced by other resources (e.g. dashboards).
	// +kubebuilder:validation:Optional
	ForceDelete *bool `json:"forceDelete,omitempty" tf:"force_delete,omitempty"`

	// A static set of groups to filter monitor-based SLOs
	// +kubebuilder:validation:Optional
	Groups []*string `json:"groups,omitempty" tf:"groups,omitempty"`

	// A static set of monitor IDs to use as part of the SLO
	// +kubebuilder:validation:Optional
	MonitorIds []*float64 `json:"monitorIds,omitempty" tf:"monitor_ids,omitempty"`

	// Name of Datadog service level objective
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The metric query of good / total events
	// +kubebuilder:validation:Optional
	Query []QueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// A list of tags to associate with your service level objective. This can help you categorize and filter service level objectives in the service level objectives page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// A list of thresholds and targets that define the service level objectives from the provided SLIs.
	// +kubebuilder:validation:Optional
	Thresholds []ThresholdsParameters `json:"thresholds,omitempty" tf:"thresholds,omitempty"`

	// The type of the service level objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation page](https://docs.datadoghq.com/api/v1/service-level-objectives/#create-a-slo-object). Valid values are `metric`, `monitor`.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Whether or not to validate the SLO.
	// +kubebuilder:validation:Optional
	Validate *bool `json:"validate,omitempty" tf:"validate,omitempty"`
}

type ThresholdsInitParameters struct {

	// The objective's target in`[0,100]`.
	Target *float64 `json:"target,omitempty" tf:"target,omitempty"`

	// The time frame for the objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API documentation page. Valid values are `7d`, `30d`, `90d`, `custom`.
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// The objective's warning value in `[0,100]`. This must be greater than the target value.
	Warning *float64 `json:"warning,omitempty" tf:"warning,omitempty"`
}

type ThresholdsObservation struct {

	// The objective's target in`[0,100]`.
	Target *float64 `json:"target,omitempty" tf:"target,omitempty"`

	// A string representation of the target that indicates its precision. It uses trailing zeros to show significant decimal places (e.g. `98.00`).
	TargetDisplay *string `json:"targetDisplay,omitempty" tf:"target_display,omitempty"`

	// The time frame for the objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API documentation page. Valid values are `7d`, `30d`, `90d`, `custom`.
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// The objective's warning value in `[0,100]`. This must be greater than the target value.
	Warning *float64 `json:"warning,omitempty" tf:"warning,omitempty"`

	// A string representation of the warning target (see the description of the target_display field for details).
	WarningDisplay *string `json:"warningDisplay,omitempty" tf:"warning_display,omitempty"`
}

type ThresholdsParameters struct {

	// The objective's target in`[0,100]`.
	// +kubebuilder:validation:Optional
	Target *float64 `json:"target,omitempty" tf:"target,omitempty"`

	// The time frame for the objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API documentation page. Valid values are `7d`, `30d`, `90d`, `custom`.
	// +kubebuilder:validation:Optional
	Timeframe *string `json:"timeframe,omitempty" tf:"timeframe,omitempty"`

	// The objective's warning value in `[0,100]`. This must be greater than the target value.
	// +kubebuilder:validation:Optional
	Warning *float64 `json:"warning,omitempty" tf:"warning,omitempty"`
}

// ServiceLevelObjectiveSpec defines the desired state of ServiceLevelObjective
type ServiceLevelObjectiveSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceLevelObjectiveParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServiceLevelObjectiveInitParameters `json:"initProvider,omitempty"`
}

// ServiceLevelObjectiveStatus defines the observed state of ServiceLevelObjective.
type ServiceLevelObjectiveStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceLevelObjectiveObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceLevelObjective is the Schema for the ServiceLevelObjectives API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,datadog}
type ServiceLevelObjective struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.thresholds) || has(self.initProvider.thresholds)",message="thresholds is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || has(self.initProvider.type)",message="type is a required parameter"
	Spec   ServiceLevelObjectiveSpec   `json:"spec"`
	Status ServiceLevelObjectiveStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceLevelObjectiveList contains a list of ServiceLevelObjectives
type ServiceLevelObjectiveList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceLevelObjective `json:"items"`
}

// Repository type metadata.
var (
	ServiceLevelObjective_Kind             = "ServiceLevelObjective"
	ServiceLevelObjective_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceLevelObjective_Kind}.String()
	ServiceLevelObjective_KindAPIVersion   = ServiceLevelObjective_Kind + "." + CRDGroupVersion.String()
	ServiceLevelObjective_GroupVersionKind = CRDGroupVersion.WithKind(ServiceLevelObjective_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceLevelObjective{}, &ServiceLevelObjectiveList{})
}
